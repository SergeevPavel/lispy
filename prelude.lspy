;
; Define atoms
;

(def {nil} {})

(def {fun} (\{args body} {
  def (head args) (\(tail args) body)
}))

;
; Logic
;

(def {true} 1)
(def {false} 0)

(fun {not x} {
  if (== x 0)
  { 1 }
  { 0 }
})
(fun {and x y} {(* x y)})
(fun {or x y} {(+ x y)})

;
; List tools
;
(fun {fst l} {
  eval (head l)
})

(fun {len l} {
  if (== l nil)
    { 0 }
    { + (len (tail l)) 1 }
})

(fun {nth n l} {
  if (== n 0)
    { fst l }
    { nth (- n 1) (tail l) }
})

(fun {take n l} {
  if (== n 0)
    { nil }
    { join (head l) (take (- n 1) (tail l)) }
})

(fun {drop n l} {
  if (== n 0)
    { l }
    { drop (- n 1) (tail l) }
})

(fun {split n l} {
  list (take n l) (drop n l)
})

(fun {last l} {
  nth (- (len l) 1) l
})

;
; Control flow
;

; Try to replace with Haskell style do notation
(fun {do & l} {
  if (== l nil)
    { nil }
    { last l }
})

(fun {for ind min max body} {
  do (fun {_for i} {
    if (< i max)
      { do (= ind i) (eval body) (_for (+ i 1)) }
      nil
  }) (_for min)
})

(fun {while cond body} {
  if (eval cond)
    { do (eval body) (while cond body) }
    nil
})

;
; Math
;
(fun {sqr x} {
  (* x x)
})
